* Aesthetics
Settings related to the appearance of Doom Emacs, but not it's functionality.

** Theming
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC

** Font
Set font face
#+begin_src emacs-lisp
(setq doom-font (font-spec :size 22))
#+end_src

Enable mixed-pitch mode
#+begin_src emacs-lisp
(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config
  (setq mixed-pitch-set-height t)
  (set-face-attribute 'variable-pitch nil :family "CMU Serif" :height 1.3))
#+end_src

Set scaling in write-room mode
#+begin_src emacs-lisp
(setq +zen-text-scale 1.1)
#+end_src

** GUI
Disable titlebar
#+begin_src emacs-lisp
(setq default-frame-alist '((undecorated . t)))
#+end_src

** Show line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

** Hide emphasis (bold, italic) markers for clean editing
#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t))
#+end_src

* Movement
** Window Movement
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-h")  'windmove-left)
(global-set-key (kbd "M-s-l") 'windmove-right)
(global-set-key (kbd "M-s-k")    'windmove-up)
(global-set-key (kbd "M-s-j")  'windmove-down)
#+end_src

* Debugging
This section is for code to patch problems unresolved in the upstream.
** Evil search not working in folded org-headings
The following code should help (Source: https://github.com/doomemacs/doomemacs/issues/6478)
#+begin_src emacs-lisp
(after! evil
  (evil-select-search-module 'evil-search-module 'isearch))
#+end_src

* Biblio setup
#+begin_src emacs-lisp
;; biblio
(after! citar
  (setq citar-bibliography '("~/Dropbox/JHU/references/references.bib")))

#+end_src
* Org
** Org-Mode Configuration
#+begin_src emacs-lisp
(setq initial-buffer-choice "~/Dropbox/JHU/notes/index.org")
(setq org-directory "~/Dropbox/JHU/notes")
(setq org-log-done 'time)
(setq org-columns-default-format
      "%70ITEM %TODO %3PRIORITY %TAGS %DEADLINE %SCHEDULED %TIMESTAMP")
#+end_src

** Org Attach and Keywords
*** Setup
#+begin_src emacs-lisp
(after! org
  (setq org-attach-id-directory "~/Dropbox/JHU/notes/images"))
  (setq org-todo-keywords
      '((sequence "TODO" "PROG" "WAIT" "|" "DONE" "KILL" "GIVE")))
#+end_src
** Obsidian Link Handling
#+begin_src emacs-lisp
(after! org
;; obsidan link handling for obsidian:// links
  (defun org-obidian-link-open (slash-message-id)
    "Handler for org-link-set-parameters that opens a obsidian:// link in obsidian"
    ;; remove any / at the start of slash-message-id to create real note-id
    (let ((message-id
           (replace-regexp-in-string (rx bos (* "/"))
                                     ""
                                     slash-message-id)))
      (do-applescript
       (concat "tell application \"Obsidian\" to open location \"obsidian://"
               message-id
               "\" activate"))))
  ;; on obsdian://aoeu link, this will call handler with //aoeu
)
#+end_src
** Org Roam
*** Setup
#+begin_src emacs-lisp
(after! org
  ;; Allow exporting of notes w/ org-roam nodes
  (require 'org-roam-export)
  (setq org-id-track-globally t)
  ;; Roam config
  (setq org-roam-directory "~/Dropbox/JHU/notes")
  (setq org-roam-db-location "~/.roam/org-roam.db")
  ;; Latex preview by default
  ;;(setq org-startup-with-latex-preview t)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))
#+end_src
*** Insert node without jumping to insert buffer
Source: https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
#+begin_src emacs-lisp
;; Bind this to C-c n I

(after! org
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates) '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
  (map! :leader
        :desc "Insert node immediate"
        "n r I" #'org-roam-node-insert-immediate)
)
#+end_src
*** Custom org-roam capture templates
Source:
https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/#streamlined-custom-capture-for-tasks-and-notes
#+begin_src emacs-lisp
(global-set-key (kbd "C-c n t") #'my/org-roam-capture-task)
(after! org-roam
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :%^{tag}:") :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Dates\n\n"
           :if-new (file+head "projects/${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :project:") :unnarrowed t)
          ("r" "contact" plain "* Contact\n\n%?"
           :if-new (file+head "contacts/${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :contact:") :unnarrowed t)
          ("c" "consult" plain "* Description\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n*"
           :if-new (file+head "consults/${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :consult:") :unnarrowed t)
          ("c" "consult" plain "* Description\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n*"
           :if-new (file+head "consults/${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :consult:") :unnarrowed t)
          ("i" "interaction" entry "* %?"
            :target (file+olp nil ("Interactions"))
            :unnarrowed t)
          )))

#+end_src
*** Custom org-capture template
#+begin_src emacs-lisp
(after! org
  ;; Custom capture templates
  (setq org-capture-templates
        '(("t" "tickler" entry (file+headline "~/Dropbox/JHU/notes/calendar.org" "Tickler")
           "* TODO %?\n"))))
#+end_src
*** Turn on unlinked reference search in org-roam (may slow things down)
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-mode-section-functions
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section)))

#+end_src
*** Org-roam insert add space after VIM cursor
#+begin_src emacs-lisp
(after! org-roam
      ; Workaround an upstream issue with evil, as described in https://github.com/syl20bnr/spacemacs/issues/14137
      (defadvice org-roam-node-insert (around append-if-in-evil-normal-mode activate compile)
        "If in evil normal mode and cursor is on a whitespace character, then go into
         append mode first before inserting the link. This is to put the link after the
         space rather than before."
        (let ((is-in-evil-normal-mode (and (bound-and-true-p evil-mode)
                                          (not (bound-and-true-p evil-insert-state-minor-mode))
                                          (looking-at "[[:blank:]]"))))
          (if (not is-in-evil-normal-mode)
              ad-do-it
            (evil-append 0)
            ad-do-it
            (evil-normal-state)))))


#+end_src
*** Org-roam which-key configuration
#+begin_src emacs-lisp
(after! org

  ;; Promote org heading
  (map! :leader
        (:prefix ("r" . "roam")
         :desc "Goto today" "t" #'org-roam-dailies-goto-today
         :desc "Create an entry in today's daily"  "c" #'org-roam-dailies-capture-today
         :desc "Capture to a node"  "C" #'org-roam-capture
         :desc "Goto tomorrow" "T" #'org-roam-dailies-goto-tomorrow
         :desc "Goto yesterday" "y" #'org-roam-dailies-goto-yesterday
         :desc "Go to next daily" "n" #'org-roam-dailies-goto-next-note
         :desc "Go to previous daily" "p" #'org-roam-dailies-goto-previous-note
         :desc "Find node" "f" #'org-roam-node-find
         :desc "Insert node" "i" #'org-roam-node-insert
         :desc "Insert node immediate" "I" #'org-roam-node-insert-immediate
         :desc "Roam buffer toggle" "b" #'org-roam-buffer-toggle
         :desc "Sync database" "s" #'org-roam-db-sync
         :desc "Goto date" "d" #'org-roam-dailies-goto-date
         )))

#+end_src
*** Org add file targets to org-refile
#+begin_src emacs-lisp
(after! org-roam
  (setq org-refile-use-outline-path 'file))
#+end_src
** Org Aesthetics
*** Use custom font for Org Headers
#+begin_src emacs-lisp
;; (after! org
;;   (custom-theme-set-faces
;;    'user
;;    '(org-level-1 ((t (:inherit outline-1 :family "CMU Sans Serif Demi Condensed" :height 1.1))) t)
;;    '(org-level-2 ((t (:inherit outline-2 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-3 ((t (:inherit outline-3 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-4 ((t (:inherit outline-4 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-5 ((t (:inherit outline-5 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-6 ((t (:inherit outline-6 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-7 ((t (:inherit outline-7 :family "CMU Sans Serif Demi Condensed"))) t)))
#+end_src
*** Use inline images
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src
*** Add margins to display
Borrowed from SystemCrafters: https://github.com/daviwil/emacs-from-scratch/tree/1a13fcf0dd6afb41fce71bf93c5571931999fed8
#+begin_src emacs-lisp
(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . org-mode-visual-fill))

#+end_src
** Org Agenda
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/Dropbox/JHU/notes/daily"
    "~/Dropbox/JHU/notes/projects"
    "~/Dropbox/JHU/notes/working_groups/working_groups.org"
    "~/Dropbox/JHU/notes/consults"
    "~/Dropbox/JHU/notes/areas.org"
    "~/Dropbox/JHU/notes/calendar.org"
    "~/Dropbox/JHU/notes/instruction.org"
    "~/Dropbox/JHU/notes/professional_development.org"
    "~/Dropbox/JHU/notes/data_grant.org"
    "~/Dropbox/JHU/notes/icpsr.org"
    "~/Dropbox/JHU/notes/data_grant.org"
    "~/Dropbox/JHU/notes/outreach.org"
    "~/Dropbox/JHU/notes/admin.org"
    "~/Dropbox/JHU/notes/data_visualization.org"
    )))
#+end_src

#+RESULTS:
| ~/Dropbox/JHU/notes/projects | ~/Dropbox/JHU/notes/consults | ~/Dropbox/JHU/notes/daily |
** Org Super-Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
     ; Line divider between days (https://github.com/alphapapa/org-super-agenda/issues/74)
      org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date)))
      org-agenda-include-diary nil
      org-agenda-block-separator t
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t
      ;; Custom org separator
      org-agenda-block-separator (string-to-char "━")
      ;; Add spacing between blocks
      org-agenda-compact-blocks nil
      org-agenda-start-day nil)
  (setq org-agenda-custom-commands
        ;; Tags and Todos with: tags "TAG/TODO|WAIT"
        '(

          ("p" "Projects"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/projects/projects.org"))
                               (org-agenda-overriding-header "Project TODOs")
                               (org-agenda-prefix-format " %-4t% s")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))
          ("z" "Areas"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/areas.org"))
                               (org-agenda-overriding-header "Area TODOs")
                               (org-agenda-prefix-format " %-4t% s")
                               (org-super-agenda-groups
                                '((:auto-outline-path f)))))
            ))
          ("g" "Working Groups"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/working_groups/working_groups.org"))
                               (org-agenda-overriding-header "Working Group TODOs")
                               (org-agenda-prefix-format " %-4t% s")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))
          ("c" "Consults"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/consults/consults.org"))
                               (org-agenda-overriding-header "Consult TODOs")
                               (org-agenda-prefix-format " %-4t% s")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))
          ("w" "Waiting"
           ((todo "WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/projects/projects.org"
                                "~/Dropbox/JHU/notes/consults/consults.org"
                                "~/Dropbox/JHU/notes/working_groups/working_groups.org"
                                "~/Dropbox/JHU/notes/areas.org"))
                               (org-agenda-overriding-header "Waiting Actions")
                               (org-super-agenda-groups
                                '((:auto-outline-path f)))))
            ))
          ("n" "Next Actions"
           (
                (tags "next/TODO|WAIT"
                (
                               (org-agenda-files '("~/Dropbox/JHU/notes/consults/consults.org"))
                               (org-agenda-overriding-header "Next Consult")
                               (org-agenda-block-separator (string-to-char "━"))
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
                (tags "next/TODO|WAIT"
                (
                               (org-agenda-files '("~/Dropbox/JHU/notes/working_groups/working_groups.org"))
                               (org-agenda-overriding-header "\nNext Working Group")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
                (tags "next/TODO|WAIT"
                (
                               (org-agenda-files '("~/Dropbox/JHU/notes/projects/projects.org"))
                               (org-agenda-overriding-header "\nNext Project")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))

                (tags "next/TODO|WAIT"
                (
                               (org-agenda-files '("~/Dropbox/JHU/notes/areas.org"))
                               (org-agenda-overriding-header "\nNext Area")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))

          ("s" "Someday"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/someday.org"))
                               (org-agenda-overriding-header "Someday")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))

          ("d" "Deadlines" agenda ""
           ((org-agenda-files '("~/Dropbox/JHU/notes/projects/projects.org"
                                "~/Dropbox/JHU/notes/consults/consults.org"
                                "~/Dropbox/JHU/notes/working_groups/working_groups.org"
                                "~/Dropbox/JHU/notes/areas.org"
                                "~/Dropbox/JHU/notes/instruction.org"))
            ))

          ("r" "Weekly review"
           ((todo "DONE|KILL" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/projects/projects.org"
                                "~/Dropbox/JHU/notes/consults/consults.org"
                                "~/Dropbox/JHU/notes/working_groups/working_groups.org"
                                "~/Dropbox/JHU/notes/areas.org"
                                "~/Dropbox/JHU/notes/instruction.org"))

                               (org-agenda-start-day "-7d")
                               (org-agenda-start-on-weekday 1)
                               (org-agenda-start-with-log-mode '(closed))
                               (org-agenda-show-log t)
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))
          ))
  :config
  (org-super-agenda-mode))
#+end_src

#+RESULTS:
: t
** Org Tag Styling
#+begin_src emacs-lisp
(setq org-tag-faces
      '(("next" . (:foreground "LightSkyBlue" :weight bold))
        ("tickler" . (:foreground "Purple" :weight bold))
        ("jira" . (:foreground "#FFFFFF" :background "#0052CC" :weight bold))))
#+end_src
** Org Auto Update Cookies
#+begin_src emacs-elisp
(defun org-update-cookies-after-save()
(interactive)
(let ((current-prefix-arg '(4)))
(org-update-statistics-cookies "ALL")))

(add-hook 'org-mode-hook
(lambda () (add-hook 'before-save-hook 'org-update-cookies-after-save nil 'make-it-local)))
#+end_src
