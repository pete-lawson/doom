* Aesthetics
Settings related to the appearance of Doom Emacs, but not it's functionality.
** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox-light)
#+END_SRC

** Font
*** Set font face
#+begin_src emacs-lisp
(setq doom-font (font-spec :size 22))
#+end_src

*** Enable mixed-pitch mode
#+begin_src emacs-lisp
(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config
  (setq mixed-pitch-set-height t)
  (set-face-attribute 'variable-pitch nil :family "CMU Serif" :height 1.2))
#+end_src

*** Set scaling in write-room mode
#+begin_src emacs-lisp
(setq +zen-text-scale 1.1)
#+end_src

** Disable titlebar
#+begin_src emacs-lisp
(setq default-frame-alist '((undecorated . t)))
#+end_src

** Show line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

** Hide emphasis (bold, italic) markers for clean editing
#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t))
#+end_src
* Movement
** Window Movement
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-h")  'windmove-left)
(global-set-key (kbd "M-s-l") 'windmove-right)
(global-set-key (kbd "M-s-k")    'windmove-up)
(global-set-key (kbd "M-s-j")  'windmove-down)
#+end_src

* Biblio setup
#+begin_src emacs-lisp
;; biblio
(after! citar
  (setq citar-bibliography '("~/Dropbox/JHU/references/references.bib")))

#+end_src
* Org
** Set initial buffer
Load the Index MOC as the inital buffer
#+begin_src emacs-lisp
(setq initial-buffer-choice "~/Dropbox/JHU/notes/index.org")
#+end_src
** Org Directory
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/JHU/notes")
#+end_src

** Org Attach
*** Setup
#+begin_src emacs-lisp
(after! org
  (setq org-attach-id-directory "~/Dropbox/JHU/notes/images"))
#+end_src
** Org Roam
*** Setup
#+begin_src emacs-lisp
(after! org
  (setq org-roam-directory "~/Dropbox/JHU/notes")
  (setq org-roam-db-location "~/.roam/org-roam.db")
  (setq org-startup-with-latex-preview t)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))
#+end_src
*** Insert node without jumping to insert buffer
Source: https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
#+begin_src emacs-lisp
;; Bind this to C-c n I

(after! org
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates) '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
  (map! :leader
        :desc "Insert node immediate"
        "n r I" #'org-roam-node-insert-immediate)
)
#+end_src
*** Custom org-roam capture templates
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n") :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "projects/${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :project:") :unnarrowed t)
          ("c" "consult" plain "* Description\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n*"
           :if-new (file+head "consults/${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: :consult:") :unnarrowed t)

          )))

#+end_src
*** Org-roam insert add space after VIM cursor
#+begin_src emacs-lisp
(after! org-roam
      ; Workaround an upstream issue with evil, as described in https://github.com/syl20bnr/spacemacs/issues/14137
      (defadvice org-roam-node-insert (around append-if-in-evil-normal-mode activate compile)
        "If in evil normal mode and cursor is on a whitespace character, then go into
         append mode first before inserting the link. This is to put the link after the
         space rather than before."
        (let ((is-in-evil-normal-mode (and (bound-and-true-p evil-mode)
                                          (not (bound-and-true-p evil-insert-state-minor-mode))
                                          (looking-at "[[:blank:]]"))))
          (if (not is-in-evil-normal-mode)
              ad-do-it
            (evil-append 0)
            ad-do-it
            (evil-normal-state)))))


#+end_src
*** Org-roam which-key configuration
#+begin_src emacs-lisp
(after! org

  ;; Promote org heading
  (map! :leader
        (:prefix ("r" . "roam")
         :desc "Goto today" "t" #'org-roam-dailies-goto-today
         :desc "Goto tomorrow" "T" #'org-roam-dailies-goto-tomorrow
         :desc "Goto yesterday" "y" #'org-roam-dailies-goto-yesterday
         :desc "Find node" "f" #'org-roam-node-find
         :desc "Insert node" "i" #'org-roam-node-insert
         :desc "Insert node immediate" "I" #'org-roam-node-insert-immediate
         :desc "Roam buffer toggle" "b" #'org-roam-buffer-toggle
         :desc "Sync database" "s" #'org-roam-db-sync
         :desc "Goto date" "d" #'org-roam-dailies-goto-date
         )))

#+end_src

** Org Aesthetics
*** Use custom font for Org Headers
#+begin_src emacs-lisp
;; (after! org
;;   (custom-theme-set-faces
;;    'user
;;    '(org-level-1 ((t (:inherit outline-1 :family "CMU Sans Serif Demi Condensed" :height 1.1))) t)
;;    '(org-level-2 ((t (:inherit outline-2 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-3 ((t (:inherit outline-3 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-4 ((t (:inherit outline-4 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-5 ((t (:inherit outline-5 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-6 ((t (:inherit outline-6 :family "CMU Sans Serif Demi Condensed"))) t)
;;    '(org-level-7 ((t (:inherit outline-7 :family "CMU Sans Serif Demi Condensed"))) t)))
#+end_src
*** Use inline images
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/Dropbox/JHU/notes/daily"
    "~/Dropbox/JHU/notes/projects/projects.org"
    "~/Dropbox/JHU/notes/consults/consults.org"
    "~/Dropbox/JHU/notes/areas.org"
    )))
#+end_src

#+RESULTS:
| ~/Dropbox/JHU/notes/projects | ~/Dropbox/JHU/notes/consults | ~/Dropbox/JHU/notes/daily |
** Org Super-Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t
      org-agenda-start-day nil)
  (setq org-agenda-custom-commands
        '(("p" "Projects"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/projects/projects.org"))
                               (org-agenda-overriding-header "Project TODOs")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))
          ("c" "Consults"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/consults/consults.org"))
                               (org-agenda-overriding-header "Consult TODOs")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))
          ("a" "Areas"
           ((todo "TODO|WAIT" (
                               (org-agenda-files '("~/Dropbox/JHU/notes/areas.org"))
                               (org-agenda-overriding-header "Area TODOs")
                               (org-super-agenda-groups
                                '((:auto-outline-path t)))))
            ))

          ))
  :config
  (org-super-agenda-mode))
#+end_src
